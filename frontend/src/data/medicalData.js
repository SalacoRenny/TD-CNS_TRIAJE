// ===============================================
// 游늶 DATOS M칄DICOS PARA AUTOCOMPLETADO AISANA
// frontend/src/data/medicalData.js
// ===============================================

// 游뽘 S칈NTOMAS PRINCIPALES - Para autocompletado inteligente
export const COMMON_SYMPTOMS = [
  // Dolor (categor칤a m치s com칰n)
  'dolor de cabeza',
  'dolor de pecho',
  'dolor abdominal',
  'dolor de espalda',
  'dolor de garganta',
  'dolor de o칤do',
  'dolor de dientes',
  'dolor de est칩mago',
  'dolor muscular',
  'dolor articular',
  'dolor de huesos',
  'dolor al respirar',
  'dolor al tragar',
  'dolor intenso',
  'dolor severo',
  'dolor cr칩nico',

  // Respiratorios
  'dificultad para respirar',
  'dificultad respiratoria',
  'falta de aire',
  'tos seca',
  'tos con flema',
  'tos persistente',
  'silbido al respirar',
  'ahogo',
  'respiraci칩n entrecortada',

  // Digestivos
  'n치useas',
  'v칩mitos',
  'diarrea',
  'estre침imiento',
  'acidez estomacal',
  'reflujo',
  'p칠rdida de apetito',
  'indigesti칩n',

  // Neurol칩gicos
  'mareos',
  'v칠rtigo',
  'confusi칩n',
  'p칠rdida de memoria',
  'hormigueo',
  'entumecimiento',
  'debilidad muscular',
  'temblores',

  // Cardiovasculares
  'palpitaciones',
  'taquicardia',
  'presi칩n en el pecho',
  'hinchaz칩n de piernas',
  'hinchaz칩n de pies',

  // Generales
  'fiebre',
  'fiebre alta',
  'escalofr칤os',
  'sudoraci칩n excesiva',
  'fatiga',
  'cansancio extremo',
  'p칠rdida de peso',
  'sangrado',
  'erupci칩n cut치nea',
  'picaz칩n',
  'inflamaci칩n',
  'hinchaz칩n'
];

// 游낀 ENFERMEDADES PREEXISTENTES - Para autocompletado y validaci칩n
export const PREEXISTING_CONDITIONS = [
  // Cardiovasculares
  'diabetes',
  'diabetes tipo 1',
  'diabetes tipo 2',
  'hipertensi칩n',
  'hipertensi칩n arterial',
  'presi칩n alta',
  'enfermedad card칤aca',
  'arritmia',
  'insuficiencia card칤aca',
  'infarto previo',

  // Respiratorios
  'asma',
  'asma bronquial',
  'bronquitis cr칩nica',
  'enfisema',
  'EPOC',
  'apnea del sue침o',

  // Endocrinos
  'hipotiroidismo',
  'hipertiroidismo',
  'tiroides',
  'obesidad',
  's칤ndrome metab칩lico',

  // Digestivos
  'gastritis',
  '칰lcera g치strica',
  'reflujo gastroesof치gico',
  'enfermedad de Crohn',
  'colitis ulcerosa',
  'h칤gado graso',

  // Neurol칩gicos
  'epilepsia',
  'migra침a',
  'cefalea tensional',
  'depresi칩n',
  'ansiedad',
  'trastorno bipolar',

  // Musculoesquel칠ticos
  'artritis',
  'artritis reumatoide',
  'osteoartritis',
  'osteoporosis',
  'fibromialgia',
  'lumbalgia cr칩nica',

  // Renales
  'insuficiencia renal',
  'c치lculos renales',
  'infecci칩n urinaria recurrente',

  // Hematol칩gicos
  'anemia',
  'anemia ferrop칠nica',
  'leucemia',
  'hemofilia',

  // Dermatol칩gicos
  'psoriasis',
  'eczema',
  'dermatitis at칩pica',

  // Oftalmol칩gicos
  'glaucoma',
  'cataratas',
  'miop칤a',

  // Ginecol칩gicos
  'endometriosis',
  's칤ndrome de ovario poliqu칤stico',
  'menopausia',

  // Otros
  'c치ncer',
  'VIH',
  'hepatitis B',
  'hepatitis C',
  'tuberculosis',
  'lupus',
  'esclerosis m칰ltiple'
];

// 游꿢 FUNCI칍N DE FILTRADO INTELIGENTE
export const filterSuggestions = (input, dataArray, maxResults = 8) => {
  if (!input || input.length < 2) return [];
  
  const normalizedInput = input.toLowerCase().trim();
  
  // Filtrar coincidencias
  const matches = dataArray.filter(item => 
    item.toLowerCase().includes(normalizedInput)
  );
  
  // Ordenar por relevancia (coincidencias exactas primero)
  const sortedMatches = matches.sort((a, b) => {
    const aLower = a.toLowerCase();
    const bLower = b.toLowerCase();
    
    // Prioridad 1: Comienza con el texto
    const aStartsWith = aLower.startsWith(normalizedInput);
    const bStartsWith = bLower.startsWith(normalizedInput);
    
    if (aStartsWith && !bStartsWith) return -1;
    if (!aStartsWith && bStartsWith) return 1;
    
    // Prioridad 2: Longitud (m치s corto = m치s relevante)
    return a.length - b.length;
  });
  
  return sortedMatches.slice(0, maxResults);
};

// 游댌 FUNCI칍N DE VALIDACI칍N ANTI-DUPLICADOS
export const validateNoDuplicates = (newCondition, existingConditions) => {
  if (!newCondition || !newCondition.trim()) return { isValid: false, reason: 'Condici칩n vac칤a' };
  
  const normalized = newCondition.toLowerCase().trim();
  
  // Verificar duplicados exactos
  const exactDuplicate = existingConditions.find(condition => 
    condition.toLowerCase().trim() === normalized
  );
  
  if (exactDuplicate) {
    return { 
      isValid: false, 
      reason: `Ya existe: "${exactDuplicate}"`,
      duplicate: exactDuplicate 
    };
  }
  
  // Verificar similitudes (diabetes vs Diabetes vs DIABETES)
  const similarDuplicate = existingConditions.find(condition => {
    const conditionNorm = condition.toLowerCase().trim();
    return conditionNorm.includes(normalized) || normalized.includes(conditionNorm);
  });
  
  if (similarDuplicate) {
    return { 
      isValid: false, 
      reason: `Similar a: "${similarDuplicate}"`,
      duplicate: similarDuplicate 
    };
  }
  
  return { isValid: true };
};

// 游늵 FUNCI칍N PARA OBTENER ESTAD칈STICAS DE USO
export const getUsageStats = (userHistory) => {
  if (!userHistory || userHistory.length === 0) return null;
  
  const allSymptoms = userHistory.flatMap(record => record.symptoms || []);
  const allConditions = userHistory.flatMap(record => record.baseConditions || []);
  
  // S칤ntomas m치s frecuentes
  const symptomFreq = {};
  allSymptoms.forEach(symptom => {
    const normalized = symptom.toLowerCase().trim();
    symptomFreq[normalized] = (symptomFreq[normalized] || 0) + 1;
  });
  
  // Condiciones m치s frecuentes
  const conditionFreq = {};
  allConditions.forEach(condition => {
    const normalized = condition.toLowerCase().trim();
    conditionFreq[normalized] = (conditionFreq[normalized] || 0) + 1;
  });
  
  return {
    mostFrequentSymptoms: Object.entries(symptomFreq)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .map(([symptom, count]) => ({ symptom, count })),
    mostFrequentConditions: Object.entries(conditionFreq)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 3)
      .map(([condition, count]) => ({ condition, count }))
  };
};

// 游꿛 CONFIGURACI칍N DE COLORES PARA SUGERENCIAS
export const SUGGESTION_STYLES = {
  container: "absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-y-auto",
  item: "px-4 py-3 hover:bg-blue-50 cursor-pointer border-b border-gray-100 last:border-b-0 transition-colors duration-200",
  itemActive: "px-4 py-3 bg-blue-100 cursor-pointer border-b border-gray-100 last:border-b-0",
  highlight: "font-semibold text-blue-600",
  noResults: "px-4 py-3 text-gray-500 italic text-center"
};

export default {
  COMMON_SYMPTOMS,
  PREEXISTING_CONDITIONS,
  filterSuggestions,
  validateNoDuplicates,
  getUsageStats,
  SUGGESTION_STYLES
};