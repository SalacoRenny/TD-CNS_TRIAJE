// SCRIPT sessionService.js
import { v4 as uuidv4 } from 'uuid';
import SymptomRecord from '../models/SymptomRecord.js';
import User from '../models/User.js';

/**
 * Servicio de gesti√≥n de sesiones y memoria contextual
 * Maneja el historial m√©dico por paciente para IA contextual
 */
class SessionService {
  /**
   * Crea una nueva sesi√≥n de triaje para un paciente
   * @param {string} userId - ID del usuario/paciente
   * @returns {Promise<Object>} Informaci√≥n de la nueva sesi√≥n
   */
  async createNewSession(userId) {
    try {
      console.log(`üìã Creando nueva sesi√≥n para usuario: ${userId}`);
      
      // Buscar la √∫ltima sesi√≥n del usuario
      const lastRecord = await SymptomRecord.findOne({ userId })
        .sort({ createdAt: -1 })
        .select('sessionId createdAt');

      const sessionId = uuidv4();
      const now = new Date();
      
      // Determinar si es una sesi√≥n de seguimiento
      const isFollowUp = lastRecord && 
        (now - lastRecord.createdAt) < (24 * 60 * 60 * 1000); // Menos de 24 horas

      const sessionInfo = {
        sessionId,
        previousSessionId: lastRecord?.sessionId || null,
        sequence: 1,
        isFollowUp,
        createdAt: now
      };

      console.log(`‚úÖ Sesi√≥n creada: ${sessionId}`, {
        es_seguimiento: isFollowUp,
        sesion_previa: sessionInfo.previousSessionId ? 'S√≠' : 'No'
      });

      return sessionInfo;

    } catch (error) {
      console.error('‚ùå Error creando sesi√≥n:', error);
      throw new Error('Error al crear sesi√≥n de triaje');
    }
  }

  /**
   * Obtiene el historial de sesiones de un paciente
   * @param {string} userId - ID del usuario
   * @param {number} limit - L√≠mite de registros (default: 5)
   * @returns {Promise<Array>} Historial de s√≠ntomas
   */
  async getSessionHistory(userId, limit = 5) {
    try {
      console.log(`üìö Obteniendo historial para usuario: ${userId} (√∫ltimos ${limit})`);

      const history = await SymptomRecord.find({ userId })
        .sort({ createdAt: -1 })
        .limit(limit)
        .select('symptoms baseConditions temperature edad frecuenciaCardiaca presionArterial final_classification watson_response createdAt sessionId')
        .lean();

      console.log(`üìñ Historial obtenido: ${history.length} registros`);
      return history;

    } catch (error) {
      console.error('‚ùå Error obteniendo historial:', error);
      throw new Error('Error al obtener historial m√©dico');
    }
  }

  /**
   * Construye prompt contextual para Watson basado en historial
   * @param {string} userId - ID del usuario
   * @param {string} newSymptoms - S√≠ntomas actuales
   * @param {string} newDetails - Detalles actuales
   * @returns {Promise<Object>} Informaci√≥n contextual
   */
  async buildContextualPrompt(userId, newSymptoms, newDetails) {
    try {
      console.log(`üß† Construyendo contexto para usuario: ${userId}`);
      
      // üîç DEBUG: Construcci√≥n Contexto SessionService
      console.log('üìö === DEBUG SESSION SERVICE ===');
      console.log('üîß Par√°metros recibidos:', {
        userId,
        newSymptoms: newSymptoms?.substring(0, 50) + '...',
        newDetails: newDetails?.substring(0, 50) + '...'
      });

      // Obtener informaci√≥n del usuario
      const user = await User.findOne({ userId })
        .select('name age gender dateOfBirth status')
        .lean();

      console.log('üë§ Usuario encontrado:', {
        userFound: !!user,
        userName: user?.name || 'No disponible',
        userAge: user?.age || 'No disponible'
      });

      // Obtener historial reciente (√∫ltimas 3 consultas)
      const history = await this.getSessionHistory(userId, 3);
      
      console.log('üìñ Historial obtenido:', {
        userId,
        historyLength: history.length,
        hasHistory: history.length > 0,
        historyIds: history.map(h => h.sessionId || h._id)
      });

      if (history.length > 0) {
        console.log('üìã Primera consulta previa:', {
          fecha: history[0].createdAt,
          symptoms: history[0].symptoms,
          classification: history[0].final_classification?.specialty || 'No clasificado'
        });
      }

      if (history.length === 0) {
        console.log('üìù Primera consulta - sin contexto hist√≥rico');
        console.log('üìö === FIN DEBUG SESSION SERVICE ===');
        return {
          contextualPrompt: newDetails,
          hasHistory: false,
          historyCount: 0,
          userInfo: user
        };
      }

      // Construir contexto hist√≥rico
      console.log('üî® Construyendo contexto hist√≥rico...');
      const contextualPrompt = this.formatHistoricalContext(user, history, newSymptoms, newDetails);

      console.log(`üß† Contexto construido con ${history.length} consultas previas`);
      console.log('üß† Contexto final construido:', {
        hasHistory: contextualPrompt.includes('HISTORIAL DE CONSULTAS PREVIAS:'),
        contextLength: contextualPrompt.length,
        historyCount: history.length,
        incluyePalabrasClave: {
          incluyeHistorial: contextualPrompt.includes('HISTORIAL DE CONSULTAS PREVIAS:'),
          incluyeConsultas: contextualPrompt.includes('CONSULTAS PREVIAS:'),
          incluyeTextoConsultas: contextualPrompt.includes('consultas previas')
        }
      });
      
      // üîç DEBUG ADICIONAL: Mostrar fragmento del contexto construido
      console.log('üìù Fragmento del contexto (primeros 300 chars):', contextualPrompt.substring(0, 300) + '...');
      
      console.log('üìö === FIN DEBUG SESSION SERVICE ===');

      return {
        contextualPrompt,
        hasHistory: true,
        historyCount: history.length,
        userInfo: user,
        lastConsultation: history[0]?.createdAt
      };

    } catch (error) {
      console.error('‚ùå Error construyendo contexto:', error);
      console.log('üìö === FIN DEBUG SESSION SERVICE (ERROR) ===');
      // En caso de error, devolver sin contexto para no bloquear el flujo
      return {
        contextualPrompt: newDetails,
        hasHistory: false,
        historyCount: 0,
        error: error.message
      };
    }
  }

  /**
   * Formatea el contexto hist√≥rico para enviar a Watson
   * @param {Object} user - Informaci√≥n del usuario
   * @param {Array} history - Historial de consultas
   * @param {string} newSymptoms - S√≠ntomas actuales
   * @param {string} newDetails - Detalles actuales
   * @returns {string} Prompt contextual formateado
   */
  formatHistoricalContext(user, history, newSymptoms, newDetails) {
    // üîç DEBUG: Formateo de contexto
    console.log('üìù === DEBUG FORMATEO CONTEXTO ===');
    console.log('üìã Formateando contexto hist√≥rico:', {
      userInfo: !!user,
      historyLength: history?.length || 0,
      newSymptoms: newSymptoms?.substring(0, 30) + '...',
      newDetails: newDetails?.substring(0, 30) + '...'
    });

    const userInfo = this.formatUserInfo(user);
    const historyText = this.formatConsultationHistory(history);
    
    const formattedContext = `INFORMACI√ìN DEL PACIENTE:
${userInfo}

HISTORIAL DE CONSULTAS PREVIAS:
${historyText}

CONSULTA ACTUAL:
- S√≠ntomas: ${newSymptoms}
- Detalles: ${newDetails}

INSTRUCCIONES: Considera toda la informaci√≥n del paciente y su historial m√©dico para una clasificaci√≥n m√°s precisa seg√∫n el Protocolo Manchester. Presta especial atenci√≥n a patrones recurrentes o evoluci√≥n de s√≠ntomas.`;

    console.log('‚úÖ Contexto formateado exitosamente:', {
      totalLength: formattedContext.length,
      incluyeHistorial: formattedContext.includes('HISTORIAL DE CONSULTAS PREVIAS:'),
      incluyeInstrucciones: formattedContext.includes('INSTRUCCIONES:')
    });
    console.log('üìù === FIN DEBUG FORMATEO CONTEXTO ===');

    return formattedContext;
  }

  /**
   * Formatea informaci√≥n b√°sica del usuario
   * @param {Object} user - Datos del usuario
   * @returns {string} Informaci√≥n formateada
   */
  formatUserInfo(user) {
    if (!user) return '- Informaci√≥n del paciente no disponible';

    const parts = [];
    
    if (user.name) parts.push(`- Nombre: ${user.name}`);
    if (user.age) parts.push(`- Edad: ${user.age} a√±os`);
    if (user.gender) parts.push(`- G√©nero: ${user.gender}`);
    if (user.status) parts.push(`- Estado: ${user.status}`);

    return parts.length > 0 ? parts.join('\n') : '- Informaci√≥n b√°sica del paciente';
  }

  /**
   * Formatea historial de consultas para contexto
   * @param {Array} history - Historial de consultas
   * @returns {string} Historial formateado
   */
  formatConsultationHistory(history) {
    if (!history || history.length === 0) {
      return '- Sin consultas previas registradas';
    }

    return history.map((record, index) => {
      const fecha = new Date(record.createdAt).toLocaleDateString('es-ES');
      const symptoms = record.symptoms?.join(', ') || 'No especificados';
      const classification = record.final_classification?.specialty || 'No clasificado';
      const urgencyLevel = record.final_classification?.level || 'N/A';
      const temperature = record.temperature || 'No registrada';

      // üÜï Formatear signos vitales adicionales
      const edad = record.edad ? `${record.edad} a√±os` : 'No registrada';
      const fc = record.frecuenciaCardiaca ? `${record.frecuenciaCardiaca} lpm` : 'No registrada';
      const pa = record.presionArterial?.sistolica && record.presionArterial?.diastolica ? 
                `${record.presionArterial.sistolica}/${record.presionArterial.diastolica} mmHg` : 'No registrada';

return `${index + 1}. Consulta del ${fecha}:
   - S√≠ntomas: ${symptoms}
   - Edad: ${edad}
   - Temperatura: ${temperature}¬∞C
   - Frecuencia card√≠aca: ${fc}
   - Presi√≥n arterial: ${pa}
   - Clasificaci√≥n previa: Nivel ${urgencyLevel} - ${classification}
   - Condiciones base: ${record.baseConditions?.join(', ') || 'Ninguna'}`;
    }).join('\n\n');
  }

  /**
   * Actualiza el estado del usuario despu√©s de una consulta
   * @param {string} userId - ID del usuario
   * @returns {Promise<void>}
   */
  async updateUserTriageStatus(userId) {
    try {
      await User.findOneAndUpdate(
        { userId },
        { 
          status: 'con_historial',
          lastTriageDate: new Date(),
          updatedAt: new Date()
        }
      );

      console.log(`‚úÖ Estado actualizado para usuario: ${userId}`);
    } catch (error) {
      console.error('‚ùå Error actualizando estado usuario:', error);
      // No es cr√≠tico, no bloquea el flujo
    }
  }

  /**
   * Obtiene estad√≠sticas de sesiones por usuario
   * @param {string} userId - ID del usuario
   * @returns {Promise<Object>} Estad√≠sticas
   */
  async getUserSessionStats(userId) {
    try {
      const stats = await SymptomRecord.aggregate([
        { $match: { userId } },
        {
          $group: {
            _id: null,
            totalConsultas: { $sum: 1 },
            primeraConsulta: { $min: '$createdAt' },
            ultimaConsulta: { $max: '$createdAt' },
            sesionesUnicas: { $addToSet: '$sessionId' }
          }
        }
      ]);

      if (stats.length === 0) {
        return {
          totalConsultas: 0,
          totalSesiones: 0,
          primeraConsulta: null,
          ultimaConsulta: null
        };
      }

      const stat = stats[0];
      return {
        totalConsultas: stat.totalConsultas,
        totalSesiones: stat.sesionesUnicas.length,
        primeraConsulta: stat.primeraConsulta,
        ultimaConsulta: stat.ultimaConsulta
      };

    } catch (error) {
      console.error('‚ùå Error obteniendo estad√≠sticas:', error);
      return null;
    }
  }
}

export default new SessionService();